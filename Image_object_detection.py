# -*- coding: utf-8 -*-
"""Object_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPGvwKvJyefYItsOLCsc4ybPFBEpqvAM
"""


# import the necessary packages

import numpy as np
import argparse
import cv2
from PIL import Image
from google.colab.patches import cv2_imshow
from pytesseract import*


ap=argparse.ArgumentParser()
ap.add_argument("-i", "--image",required=True,help="path to input image")
ap.add_argument("-m","--model",required=True,help="path to Caffe pre-trained model")
ap.add_argument("-p", "--prototxt", required=True,help="path to Caffe 'deploy' prototxt file")
ap.add_argument("-c", "--confidence", type=float, default=0.2,help="minimum probability to filter weak detections")
args=vars(ap.parse_args())

# initialize the list of class labels MobileNet SSD was trained to
# detect, then generate a set of bounding box colors for each class
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
	"bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
	"dog", "horse", "motorbike", "person", "pottedplant", "sheep",
	"sofa", "train", "tvmonitor"]
COLORS = np.random.uniform(0, 255, size=(len(CLASSES), 3))
############################
# We load the input image and then convert
# it to RGB from BGR. We then use Tesseract
# to localize each area of text in the input
# image
images = cv2.imread(args["image"])
rgb = cv2.cvtColor(images, cv2.COLOR_BGR2RGB)
results = pytesseract.image_to_data(rgb, output_type=Output.DICT)

# Then loop over each of the individual text
# localizations
for i in range(0, len(results["text"])):
	
	# We can then extract the bounding box coordinates
	# of the text region from the current result
	x = results["left"][i]
	y = results["top"][i]
	w = results["width"][i]
	h = results["height"][i]
	
	# We will also extract the OCR text itself along
	# with the confidence of the text localization
	text = results["text"][i]
	conf = int(results["conf"][i])
	
	# filter out weak confidence text localizations
	if conf > 50:
		
		# We will display the confidence and text to
		# our terminal
		print("Confidence: {}".format(conf))
		print("Text: {}".format(text))
		print("")
		
		# We then strip out non-ASCII text so we can
		# draw the text on the image We will be using
		# OpenCV, then draw a bounding box around the
		# text along with the text itself
		text = "".join(text).strip()
		cv2.rectangle(images,
					(x, y),
					(x + w, y + h),
					(0, 0, 255), 2)
		cv2.putText(images,
					text,
					(x, y - 10),
					cv2.FONT_HERSHEY_SIMPLEX,
					1.2, (0, 255, 255), 3)
#############################
image=images.copy()
(h, w) = image.shape[:2]
print("[INFO] loading model...")
net = cv2.dnn.readNetFromCaffe(args["prototxt"], args["model"])
# load the input image and construct an input blob for the image
# by resizing to a fixed 300x300 pixels and then normalizing it
# (note: normalization is done via the authors of the MobileNet SSD
# implementation)

blob = cv2.dnn.blobFromImage(cv2.resize(image, (300, 300)), 0.007843,
	(300, 300), 127.5)
# pass the blob through the network and obtain the detections and
# predictions
print("[INFO] computing object detections...")
net.setInput(blob)
detections = net.forward()
idx=0
# loop over the detections
for i in np.arange(0, detections.shape[2]):
	# extract the confidence (i.e., probability) associated with the
	# prediction
  confidence = detections[0, 0, i, 2]
  # filter out weak detections by ensuring the `confidence` is
  idx=int(detections[0, 0, i, 1])
  if CLASSES[idx] == " ":
    continue
  # greater than the minimum confidence
  if confidence > args["confidence"]:
		# extract the index of the class label from the `detections`,
		# then compute the (x, y)-coordinates of the bounding box for
		# the object
	  idx = int(detections[0, 0, i, 1])
	  box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
	  (startX, startY, endX, endY) = box.astype("int")
		# display the prediction
    
	  label = "{}: {:.2f}%".format(CLASSES[idx], confidence * 100)
	  print("[INFO] {}".format(label))
	  cv2.rectangle(image, (startX, startY), (endX, endY),
			COLORS[idx], 2)
	  y = startY - 15 if startY - 15 > 15 else startY + 15
	  cv2.putText(image, label, (startX, y),
			cv2.FONT_HERSHEY_SIMPLEX, 0.5, COLORS[idx], 2)
# show the output image
cv2.imwrite("out.jpg", image)
